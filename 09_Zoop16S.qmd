---
title: "Zooplankton Compostions"
format: 
  html:
     page-layout: custom
     self-contained: true
server: shiny
---
::: panel-tabset

# Clustering Methods

:::: {.columns}

::: {.column width="20%"}
```{r}
#| panel: sidebar
vec_aggregation <- c(
  'PG',
  'SG1',
  'Supergroup',
  'Division',
  'Class',
  'Order',
  'Family',
  'Genus',
  'Species',
  'ASV')
vars <- vec_aggregation
 #selectInput('xcol', 'Aggregation Level',selected =1 vars)
 #selectInput('ycol', 'Y Variable', vars, selected = vars[[2]])
 #numericInput('clusters', 'Cluster count', 3, min = 1, max = 9)
RemMoment <- c('Before','After')
CHull = c("N","Y")
DephtRank = c("Y","N")
selectInput('aggLevel', 'Aggregation Level',selected = 1,vars)
numericInput('clustN', 'Cluster count', 10, min = 1, max = 40)
numericInput('AtLeastN','ASVs in at least',1,min=1,max=5)
selectInput('RemoveMoment','Remove b/a Agg.',selected = 1,RemMoment)
selectInput('CHull','Convex Hull N/Y',selected = 1,CHull)
sliderInput(inputId = "alphaGeo",
                  label = "Geo weight",
                  min = 0,
                  max = 1,step = 0.1,value = 0.1)  

selectInput('DephtRank','Depht as Rank N/Y',selected = 1,DephtRank)
```
:::

::: {.column width="80%"}

::: {.panel-tabset}

## Hclust

```{r}
#| panel: center
plotOutput('LatDepth_Ward',height = '600px')
```

### Abiotics 

::: {.panel-tabset}

#### All
```{r}
#| panel: center
plotOutput('Abiotics_Ward_Scatter')
```

#### Temp 
```{r}
#| panel: center
plotOutput('Abiotics_Ward_temp')
```

#### Salinity
```{r}
#| panel: center
plotOutput('Abiotics_Ward_Salinity')
```

#### Pressure
```{r}
#| panel: center
plotOutput('Abiotics_Ward_Pressure')
```

::: 

### MDS 

```{r}
#| panel: center
plotOutput('MDS_2D_Ward')
```

```{r}
#| panel: center
plotly::plotlyOutput('MDS_3D_Ward')
```

## Medoid

```{r}
#| panel: center
plotOutput('LatDepth_Medoids',height = '600px')
```

### Abiotics 

::: {.panel-tabset}

#### All
```{r}
#| panel: center
plotOutput('Abiotics_Medoid_Scatter')
```

#### Temp 
```{r}
#| panel: center
plotOutput('Abiotics_Medoid_temp')
```

#### Salinity
```{r}
#| panel: center
plotOutput('Abiotics_Medoid_Salinity')
```

#### Pressure
```{r}
#| panel: center
plotOutput('Abiotics_Medoid_Pressure')
```

::: 

### MDS 

```{r}
#| panel: center
plotOutput('MDS_2D_Medoid')
```

```{r}
#| panel: center
plotly::plotlyOutput('MDS_3D_Medoid',width = 'auto',height = 'auto')
```

:::

## DistMix - Ward

::: {.panel-tabset}

### Ward 

```{r}
#| panel: center
plotOutput('LatDepth_Ward_Mix',height = '600px')
```

```{r}
#| panel: center
plotOutput('MDS_2D_Ward_Mix')
```

### Medoid 

```{r}
#| panel: center
plotOutput('LatDepth_Medoid_Mix',height = '600px')
```

```{r}
#| panel: center
plotOutput('MDS_2D_Medoid_Mix')
```

:::



:::
::::

```{r}
#| context: server

#### Loading Packages 
library(shiny) ; library(vegan)
library(tidyverse) ; library(dplyr) ; library(ggplot2)
library(gridExtra) ; library(tidyr) ; library(robCompositions) ; library(viridis)  ; library(plotly)


#### Loading functions 
source("https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/ALR_CLR_distMatrices.R")
source("https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/aggregating_composition_new.R")
source("https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/ggLatDepth.R")
source("https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/ggLatDepth.R")
source('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/ggLatDepth_temp.R')
source('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/plot_mds2d.R')
source('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/plot_mds3d.R')
source('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/functions.R')
source('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/MixDist_Clust.R')

#### Loading data
metadat = data.table::fread('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/metadat_abiotic.csv') %>% as_tibble()

dat_tax = data.table::fread('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/treated_taxonomy_dat.csv') %>% as_tibble()
dat_tax = dat_tax %>% mutate(
  ASV=ifelse(
    1:nrow(dat_tax)<10,
    paste('ID000',1:nrow(dat_tax),sep=''),
    ifelse(1:nrow(dat_tax)<100,
           paste('ID00',1:nrow(dat_tax),sep=''),
           ifelse(1:nrow(dat_tax)<1000,
                  paste('ID0',1:nrow(dat_tax),sep=''),
                  paste('ID',1:nrow(dat_tax),sep=''))))
                          
)

#### Start of the app
## Input list
## input$aggLevel = 'PG'
## input$clustN = 5
## input$AtLeastN = 1

#### creating the dataset

selectedData <- reactive({
   aggregating_compositions(
        dFrame = dat_tax,
        fillZeros = 'Add',
        RemoveMoment = input$RemoveMoment,
        aggregating_level = input$aggLevel,
        PresentAtLeast = input$AtLeastN
      ) 
 })

#### Creating the distance matrices
#cat('Houston, we have a problem','\n')
#list_ALR_CLR_dist <-  ALR_CLR_distMatrices(selectedData)

#### Ward.D2 Clustering
clusters_hclust <- reactive({
  cutree(hclust(d =ALR_CLR_distMatrices(selectedData())$dist_Aitchison,
                'ward.D2'),
         input$clustN)})

#### Ward.D2 Medoid Clustering
clusters_kmedoids<- reactive({
  cluster::pam(ALR_CLR_distMatrices(selectedData())$CLR$x.clr,
               k = input$clustN,cluster.only = T)
})


#### MixDist Clustering
clusters_mixdist <- reactive({
  MixDist_Clust(metadat_aux = metadat,
                data_tax_aux = selectedData(),
                alphaGeo = input$alphaGeo,
                DephtRank = input$DephtRank,
                k_clust = input$clustN)
})


#### Storing it in the dataset

df_plot <- reactive({
  cat('Created df_plot','\n')
  aggregating_compositions(
    dFrame = dat_tax,
    fillZeros = 'Nothing',
    aggregating_level = input$aggLevel,
    PresentAtLeast = input$AtLeastN,
    metadata = metadat
  ) %>% mutate(
    OBS=1:n(),
    Ward_Clust = as.factor(clusters_hclust()),
    Medoid_Clust = as.factor(clusters_kmedoids()),
    MixMedoid_Clust = as.factor(clusters_mixdist()$MedoidClust),
    MixWard_Clust = as.factor(clusters_mixdist()$WardClust)
    #Medoid  = factor(ifelse(OBS%in%medoid_clust$id.med,1,0))
  )
})

mds_obj <- reactive({
  cat('Created mds_obj','\n')
  cmdscale(
    d = ALR_CLR_distMatrices(selectedData())$dist_Aitchison,
    k = 3,eig = T,add=T
    )
})

abiotics_ward <- reactive(
  ggLatDepth_temp(
    dataset = df_plot(),
    clusterVar = 'Ward_Clust',
    CHull = ifelse(input$CHull=='Y',T,F),
    title = '')
)

abiotics_medoids <- reactive(
  ggLatDepth_temp(
    dataset = df_plot(),
    clusterVar = 'Medoid_Clust',
    CHull = ifelse(input$CHull=='Y',T,F),
    title = '')
)

######## 
# abioticsMix_medoids <- reactive(
#   ggLatDepth_temp(
#     dataset = df_plot(),
#     clusterVar = 'MixMedoid_Clust',
#     CHull = ifelse(input$CHull=='Y',T,F),
#     title = '')
# )
# 
# abioticsMix_ward <- reactive(
#   ggLatDepth_temp(
#     dataset = df_plot(),
#     clusterVar = 'MixWard_Clust',
#     CHull = ifelse(input$CHull=='Y',T,F),
#     title = '')
# )


#### Lat Depth ------------------------

output$LatDepth_Ward <- renderPlot({
  ggLatDepth(
    dataset = df_plot(),
    clusterVar = 'Ward_Clust',MedoidName = '',
    OceanLayers = T,
    CHull = ifelse(input$CHull=='Y',T,F),
    title = '')
})

output$LatDepth_Medoids <- renderPlot({
  ggLatDepth(
    dataset = df_plot(),
    clusterVar = 'Medoid_Clust',
    OceanLayers = T,
    CHull = ifelse(input$CHull=='Y',T,F),
    title = '')
})


###### --- Mix
output$LatDepth_Ward_Mix <- renderPlot({
  ggLatDepth(
    dataset = df_plot(),
    clusterVar = 'MixWard_Clust',MedoidName = '',
    OceanLayers = T,
    CHull = ifelse(input$CHull=='Y',T,F),
    title = '')
})

output$LatDepth_Medoid_Mix <- renderPlot({
  ggLatDepth(
    dataset = df_plot(),
    clusterVar = 'MixMedoid_Clust',
    OceanLayers = T,
    CHull = ifelse(input$CHull=='Y',T,F),
    title = '')
})

#### Abiotics  ------------------------
##### Ward ----------------------------
output$Abiotics_Ward_Scatter <- renderPlot({
   abiotics_ward()$Scatter %>% grid.arrange()
})

output$Abiotics_Ward_temp <- renderPlot({
   abiotics_ward()$temp
})

output$Abiotics_Ward_Salinity <- renderPlot({
   abiotics_ward()$Salinity
})

output$Abiotics_Ward_Pressure <- renderPlot({
   abiotics_ward()$Pressure
})

##### Medoid ----------------------------
output$Abiotics_Medoid_Scatter <- renderPlot({
   abiotics_medoids()$Scatter %>% grid.arrange()
})

output$Abiotics_Medoid_temp <- renderPlot({
   abiotics_medoids()$temp
})

output$Abiotics_Medoid_Salinity <- renderPlot({
   abiotics_medoids()$Salinity
})

output$Abiotics_Medoid_Pressure <- renderPlot({
   abiotics_medoids()$Pressure
})


###### -- MDS 2D
output$MDS_2D_Ward <- renderPlot({
  plot_mds2d(
    df_group = df_plot(),
    ClusterVar = 'Ward_Clust',
    mds_OBJ = mds_obj()
    )
})


output$MDS_2D_Medoid <- renderPlot({
  plot_mds2d(
    df_group = df_plot(),
    ClusterVar = 'Medoid_Clust',
    mds_OBJ = mds_obj())
})

####--------- Mix
output$MDS_2D_Ward_Mix <- renderPlot({
  plot_mds2d(
    df_group = df_plot(),
    ClusterVar = 'MixWard_Clust',
    mds_OBJ = mds_obj()
    )
})


output$MDS_2D_Medoid_Mix <- renderPlot({
  plot_mds2d(
    df_group = df_plot(),
    ClusterVar = 'MixMedoid_Clust',
    mds_OBJ = mds_obj())
})

##### -- MDS 3D
 output$MDS_3D_Ward <- plotly::renderPlotly({
   plot_mds3d(
     df_group = df_plot(),
     ClusterVar = 'Ward_Clust',
     mds_OBJ = mds_obj())
 })
 
 
 output$MDS_3D_Medoid <- plotly::renderPlotly({
   plot_mds3d(
     df_group = df_plot(),
     ClusterVar = 'Medoid_Clust',
     mds_OBJ = mds_obj())
 })


### this was working properly

# output$Abiotics_Medoids <- renderPlot({
#    ggLatDepth_temp(
#       dataset = df_plot(),
#            clusterVar = 'Medoid_Clust',
#            title = '')$Scatter %>% grid.arrange()
# })
```

# Other Discussions

```{r,message=FALSE,warning=FALSE}
#### Loading Packages 
library(shiny)
library(tidyverse) ; library(dplyr) ; library(ggplot2)
library(gridExtra) ; library(tidyr) ; library(robCompositions) ; library(viridis)  ; library(plotly)

#### Loading functions 
source("https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/ALR_CLR_distMatrices.R")
source("https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/aggregating_composition_new.R")
source("https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/ggLatDepth.R")
source("https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/ggLatDepth.R")
source('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/ggLatDepth_temp.R')
source('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/plot_mds2d.R')
source('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/plot_mds3d.R')
source('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/functions.R')
source('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/clusterize_medoids.R')
source('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/clusterize_hclustW2.R')
#### Loading data

metadat = data.table::fread('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/metadat_abiotic.csv') %>% as_tibble()

dat_tax = data.table::fread('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/treated_taxonomy_dat.csv') %>% 
  as_tibble()

dat_tax = dat_tax %>% mutate(
  ASV=ifelse(
    1:nrow(dat_tax)<10,
    paste('ID000',1:nrow(dat_tax),sep=''),
    ifelse(1:nrow(dat_tax)<100,
           paste('ID00',1:nrow(dat_tax),sep=''),
           ifelse(1:nrow(dat_tax)<1000,
                  paste('ID0',1:nrow(dat_tax),sep=''),
                  paste('ID',1:nrow(dat_tax),sep=''))))
                          
)

```

::: {.panel-tabset}

## Creating all clusters
```{r,message=FALSE,warning=FALSE}
###### Creating all clusters ---------------------
vec_aggregation <- 
  c('PG','SG1','Supergroup','Division',
    'Class','Order','Family','Genus','Species','ASV')


# datadir = "/Users/rafaelcatoia/MyDrive/20_UCSC/Capstone/00_Data/Pacific Ocean/"
# 
# listW2 <- clusterize_hclustW2(data_taxonomy = dat_tax,
#                               vec_aggreg = vec_aggregation,
#                               max_k = 50,max_at_least = 3)
# 
# listMedois <- clusterize_kmedoids(data_taxonomy = dat_tax,
#                                   vec_aggreg = vec_aggregation,
#                                   max_k = 50,max_at_least = 3)
# 
# saveRDS(listW2,file = "/Users/rafaelcatoia/Desktop/repos/Capstone/listW2")
# saveRDS(listMedois,file = "/Users/rafaelcatoia/Desktop/repos/Capstone/listMedois")
# 
#listW2<-readRDS("/Users/rafaelcatoia/Desktop/repos/Capstone/listW2")
#listMedois<-readRDS("/Users/rafaelcatoia/Desktop/repos/Capstone/listMedois")
```


## How Diverse is each sample

In process

First and more straight forward method = counting the number of different ASVs in each sample.

```{r,message=FALSE,warning=FALSE}
#| layout-ncol: 2

ASV_Over_Samples <- data.frame(
    ASV_Id = dat_tax$ASV,
    KeyAsv = 1:length(dat_tax$ASV),
    PresentInNSamples = 195 - apply(dat_tax %>% select(starts_with("P16")),1,function(x){sum(x==0)})
    ) %>% arrange(-PresentInNSamples) %>% mutate(ASVNumber=1:n())

Samples_Over_ASV<- data.frame(
  Sample = dat_tax %>% select(starts_with("P16")) %>% colnames(),
  NumberOfASVs = apply(dat_tax %>% select(starts_with("P16")),2,function(x){sum(x!=0)}) 
) %>% arrange(-NumberOfASVs) %>% mutate(SampleNumber= 1:n())


ASV_Over_Samples %>% 
  ggplot(aes(x=ASVNumber,y=PresentInNSamples))+
  geom_point()+
  theme_minimal()

Samples_Over_ASV %>% 
  ggplot(aes(x=SampleNumber,y=NumberOfASVs))+
  geom_point()+
  theme_minimal()
```


## Mixture of Distance Matrices

```{r}
# ## Creating all Clusters
# listW2 <- clusterize_MixDist_hclustW2(
#   data_taxonomy = dat_tax,
#   vec_aggreg = vec_aggregation,
#   data_metadat = metadat,
#   max_k = 50,max_at_least = 3)
# 
# listMedois <- clusterize_MixDist_kmedoids(
#   data_taxonomy = dat_tax,
#   vec_aggreg = vec_aggregation,
#   data_metadat = metadat,
#   max_k = 50,max_at_least = 3)
# 
# 
# ##### Calculating geocoherence ------------------
# 
# ########### i is for removing at least
# ########### j is for aggregation level
# ########### k is for clustersize
# ########### i=2 ; j = 9, k = 10
# 
# # dat_tax_aux <- aggregating_compositions(
# #   dFrame = dat_tax,
# #   fillZeros = 'Nothing',
# #   aggregating_level = vec_aggregation[1],
# #   PresentAtLeast = 1,
# #   metadata = metadat
# # ) %>% mutate(
# #   OBS=1:n()) %>% 
# #   select(OBS,Latitude,Depth,Pressure_decibars,
# #          Salinity_psu,Temperature_degrees_Celsius) %>% 
# #   left_join(
# #     metadat %>% select(Samples,Latitude,Depth) %>% 
# #       arrange(Samples,Depth) %>% 
# #       group_by(Latitude) %>% mutate(DepthRank=1:n()))
# # 
# # 
# # outputSS_MixDist <- list()
# # kmax = length(listW2$AtLeast1$PG)
# # for (i in 1:3){
# #   
# #   outputAgg <- list()
# #   for(j in 1:length(vec_aggregation)){
# #     
# #     outputDistances <- list()
# #     for(k in 1:kmax){
# #       
# #       dat_tax_aux = 
# #         dat_tax_aux %>% mutate(
# #           Ward_Clust = factor(listW2[[i]][[j]][[k]]),
# #           Medoid_Clust = factor(listMedois[[i]][[j]][[k]]))
# #       
# #       outputDistances[[k]] <- list(
# #         Ward=dat_tax_aux %>% geoCoherense(ClustVar = 'Ward_Clust',DephtVar = 'DepthRank'),
# #         Medoid=dat_tax_aux %>% geoCoherense(ClustVar = 'Medoid_Clust',DephtVar = 'DepthRank'))
# #     }
# #     names(outputDistances) <- ifelse(1:kmax < 10,
# #                                      paste('Cluster0',1:kmax,sep=''),
# #                                      paste('Cluster',1:kmax,sep=''))
# #     outputAgg[[j]]<-outputDistances
# #     rm(outputDistances)
# #   }
# #   
# #   names(outputAgg) <- vec_aggregation
# #   outputSS_MixDist[[i]] <- outputAgg
# #   rm(outputAgg)
# # }
# # 
# # names(outputSS_MixDist) <- paste('AtLeastIn',1:3,sep='')
# # 
# # saveRDS(object = outputSS_MixDist,file = 'outputSS_MixDist')
# outputSS_MixDist=readRDS('outputSS_MixDist')
# 
# df_outputSS_MixDist <- outputSS_MixDist %>% plyr::ldply(function(atleast){
#   atleast %>% plyr::ldply(function(agglevel){
#     agglevel %>% plyr::ldply(function(cluster){
#       cluster %>% plyr::ldply(function(method){
#         method %>% plyr::ldply(function(dimension){
#           return(data.frame(TotalSum = sum(dimension$SumDist)))
#         }, .id = "dimension")
#       }, .id = "method")
#     }, .id = "clusters")
#   }, .id = "agglevel")
# }, .id = "atleast")
#  
# data.table::fwrite(df_outputSS_MixDist,'/Users/rafaelcatoia/Desktop/repos/Capstone/df_outputSS_MixDist.csv')
df_outputSS_MixDist <- data.table::fread('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/df_outputSS_MixDist.csv')
```

### Lat Depht Plots

```{r}

```


::: {.panel-tabset}

#### Hclust
::: {.panel-tabset}
##### Dist Prop 0.1 

##### Dist Prop 0.2

##### Dist Prop 0.5
:::

#### Medoid
::: {.panel-tabset}
##### Dist Prop 0.1 

##### Dist Prop 0.2

##### Dist Prop 0.5
:::

:::

## Geospatial Coherence

Here the idea is to verify if the clusters created in the compositions, are geo-spatial coherent.

The first try was to, given the clusters:

* sum the distances between samples within the same cluster
   + related to Latitude and Depth - Using the Euclidian distance (no transformations until now)
   + related to Abiotic Features (Temperature, Salinity and Pressure)

```{r}
# i is for removing at least
# j is for aggregation level
# k is for clustersize
#i=2 ; j = 9, k = 10

#dat_tax_aux <- aggregating_compositions(
#  dFrame = dat_tax,
#  fillZeros = 'Nothing',
#  aggregating_level = vec_aggregation[1],
#  PresentAtLeast = 1,
#  metadata = metadat
#) %>% mutate(
#  OBS=1:n()) %>% 
#  select(OBS,Latitude,Depth,Pressure_decibars,
#         Salinity_psu,Temperature_degrees_Celsius)
#
#outputSS <- list()
#kmax = length(listW2$AtLeast1$PG)
#for (i in 1:3){
#  
#  outputAgg <- list()
#  for(j in 1:length(vec_aggregation)){
#    
#    outputDistances <- list()
#    for(k in 1:kmax){
#      
#      dat_tax_aux = 
#        dat_tax_aux %>% mutate(
#          Ward_Clust = factor(listW2[[i]][[j]][[k]]),
#          Medoid_Clust = factor(listMedois[[i]][[j]][[k]]))
#      
#      outputDistances[[k]] <- list(
#        Ward=dat_tax_aux %>% geoCoherense(ClustVar = 'Ward_Clust',DephtVar = 'DepthRank'),
#        Medoid=dat_tax_aux %>% geoCoherense(ClustVar = 'Medoid_Clust',DephtVar = 'DepthRank'))
#    }
#    names(outputDistances) <- ifelse(1:kmax < 10,
#                                     paste('Cluster0',1:kmax,sep=''),
#                                     paste('Cluster',1:kmax,sep=''))
#    outputAgg[[j]]<-outputDistances
#    rm(outputDistances)
#  }
#  
#  names(outputAgg) <- vec_aggregation
#  outputSS[[i]] <- outputAgg
#  rm(outputAgg)
#}
#
#names(outputSS) <- paste('AtLeastIn',1:3,sep='')
#
#saveRDS(object = outputSS,file = 'outputSS')
#outputSS=readRDS('outputSS')
#
#df_outputSS <- outputSS %>% plyr::ldply(function(atleast){
#  atleast %>% plyr::ldply(function(agglevel){
#    agglevel %>% plyr::ldply(function(cluster){
#      cluster %>% plyr::ldply(function(method){
#        method %>% plyr::ldply(function(dimension){
#          return(data.frame(TotalSum = sum(dimension$SumDist)))
#        }, .id = "dimension")
#      }, .id = "method")
#    }, .id = "clusters")
#  }, .id = "agglevel")
#}, .id = "atleast")
# 
#data.table::fwrite(df_outputSS,'/Users/rafaelcatoia/Desktop/repos/Capstone/df_outputSS.csv')
df_outputSS <- data.table::fread('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/df_outputSS.csv')


#######--- Doing the same thing now, but wit the rank instead of the true Depht

# dat_tax_aux <- aggregating_compositions(
#   dFrame = dat_tax,
#   fillZeros = 'Nothing',
#   aggregating_level = vec_aggregation[1],
#   PresentAtLeast = 1,
#   metadata = metadat
# ) %>% mutate(
#   OBS=1:n()) %>% 
#   select(OBS,Latitude,Depth,Pressure_decibars,
#          Salinity_psu,Temperature_degrees_Celsius) %>% 
#   left_join(
#     metadat %>% select(Samples,Latitude,Depth) %>% 
#   arrange(Samples,Depth) %>% 
#   group_by(Latitude) %>% mutate(DepthRank=1:n()))
# 
# outputSS_Rank <- list()
# kmax = length(listW2$AtLeast1$PG)
# for (i in 1:3){
#   
#   outputAgg <- list()
#   for(j in 1:length(vec_aggregation)){
#     
#     outputDistances <- list()
#     for(k in 1:kmax){
#       
#       dat_tax_aux = 
#         dat_tax_aux %>% mutate(
#           Ward_Clust = factor(listW2[[i]][[j]][[k]]),
#           Medoid_Clust = factor(listMedois[[i]][[j]][[k]]))
#       
#       outputDistances[[k]] <- list(
#         Ward=dat_tax_aux %>% geoCoherense(ClustVar = 'Ward_Clust',DephtVar = 'DepthRank'),
#         Medoid=dat_tax_aux %>% geoCoherense(ClustVar = 'Medoid_Clust',DephtVar = 'DepthRank'))
#     }
#     names(outputDistances) <- ifelse(1:kmax < 10,
#                                      paste('Cluster0',1:kmax,sep=''),
#                                      paste('Cluster',1:kmax,sep=''))
#     outputAgg[[j]]<-outputDistances
#     rm(outputDistances)
#   }
#   
#   names(outputAgg) <- vec_aggregation
#   outputSS_Rank[[i]] <- outputAgg
#   rm(outputAgg)
# }
# 
# names(outputSS_Rank) <- paste('AtLeastIn',1:3,sep='')
# 
# saveRDS(object = outputSS_Rank,file = 'outputSS_Rank')
# outputSS_Rank=readRDS('outputSS_Rank')
# 
# df_outputSS_Rank <- outputSS_Rank %>% plyr::ldply(function(atleast){
#   atleast %>% plyr::ldply(function(agglevel){
#     agglevel %>% plyr::ldply(function(cluster){
#       cluster %>% plyr::ldply(function(method){
#         method %>% plyr::ldply(function(dimension){
#           return(data.frame(TotalSum = sum(dimension$SumDist)))
#         }, .id = "dimension")
#       }, .id = "method")
#     }, .id = "clusters")
#   }, .id = "agglevel")
# }, .id = "atleast")

#data.table::fwrite(df_outputSS_Rank,'/Users/rafaelcatoia/Desktop/repos/Capstone/df_outputSS_Rank.csv')
df_outputSS_Rank <- data.table::fread('https://raw.githubusercontent.com/rafaelcatoia/zoop_16N/main/df_outputSS_Rank.csv')

```

::: {.panel-tabset}

### Lat Depht

::: {.panel-tabset}

#### Original distance
```{r}
df_outputSS %>% 
  mutate(NumberOfClusters = as.integer(gsub('Cluster','',clusters)),
         Dimension = ifelse(dimension=='df_LatDephtDistance','GeoSpatial','Abiotics'),
         agglevel=factor(agglevel,levels=vec_aggregation)) %>%
  filter(Dimension=='GeoSpatial') %>% 
  ggplot(aes(x=NumberOfClusters,y=log(TotalSum),color=method,linetype=atleast))+
  geom_line(linewidth=0.75,alpha=0.75)+
  facet_wrap(~agglevel,nrow=2)+
  theme_minimal()+
  theme(legend.position = 'bottom')+ggtitle('Depth')


df_outputSS %>% 
  mutate(NumberOfClusters = as.integer(gsub('Cluster','',clusters)),
         Dimension = ifelse(dimension=='df_LatDephtDistance','GeoSpatial','Abiotics'),
         agglevel=factor(agglevel,levels=vec_aggregation)) %>%
  filter(Dimension=='GeoSpatial') %>% 
  ggplot(aes(x=NumberOfClusters,y=log(TotalSum),color=agglevel))+
  geom_line(linewidth=1,alpha=0.75)+
  facet_grid(atleast~method)+
  theme_minimal()+
  theme(legend.position = 'bottom')+
  viridis::scale_color_viridis(10,discrete = T)+ggtitle('Depth')
```


#### Rank

```{r}
df_outputSS_Rank %>% 
  mutate(NumberOfClusters = as.integer(gsub('Cluster','',clusters)),
         Dimension = ifelse(dimension=='df_LatDephtDistance','GeoSpatial','Abiotics'),
         agglevel=factor(agglevel,levels=vec_aggregation)) %>%
  filter(Dimension=='GeoSpatial') %>% 
  ggplot(aes(x=NumberOfClusters,y=log(TotalSum),color=method,linetype=atleast))+
  geom_line(linewidth=0.75,alpha=0.75)+
  facet_wrap(~agglevel,nrow=2)+
  theme_minimal()+
  theme(legend.position = 'bottom')+ggtitle('Rank-Depth')

df_outputSS_Rank %>% 
  mutate(NumberOfClusters = as.integer(gsub('Cluster','',clusters)),
         Dimension = ifelse(dimension=='df_LatDephtDistance','GeoSpatial','Abiotics'),
         agglevel=factor(agglevel,levels=vec_aggregation)) %>%
  filter(Dimension=='GeoSpatial') %>% 
  ggplot(aes(x=NumberOfClusters,y=log(TotalSum),color=agglevel))+
  geom_line(linewidth=1,alpha=0.75)+
  facet_grid(atleast~method)+
  theme_minimal()+
  theme(legend.position = 'bottom')+
  viridis::scale_color_viridis(10,discrete = T)+ggtitle('Rank-Depth')
```

#### Mixture of DistMatrices
```{r}
df_outputSS_MixDist  %>% 
  mutate(NumberOfClusters = as.integer(gsub('Cluster','',clusters)),
         Dimension = ifelse(dimension=='df_LatDephtDistance','GeoSpatial','Abiotics'),
         agglevel=factor(agglevel,levels=vec_aggregation)) %>%
  filter(Dimension=='GeoSpatial') %>% 
  ggplot(aes(x=NumberOfClusters,y=log(TotalSum),color=method,linetype=atleast))+
  geom_line(linewidth=0.75,alpha=0.75)+
  facet_wrap(~agglevel,nrow=2)+
  theme_minimal()+
  theme(legend.position = 'bottom')+ggtitle('MixDist-0.2')


df_outputSS_MixDist %>% 
  mutate(NumberOfClusters = as.integer(gsub('Cluster','',clusters)),
         Dimension = ifelse(dimension=='df_LatDephtDistance','GeoSpatial','Abiotics'),
         agglevel=factor(agglevel,levels=vec_aggregation)) %>%
  filter(Dimension=='GeoSpatial') %>% 
  ggplot(aes(x=NumberOfClusters,y=log(TotalSum),color=agglevel))+
  geom_line(linewidth=1,alpha=0.75)+
  facet_grid(atleast~method)+
  theme_minimal()+
  theme(legend.position = 'bottom')+
  viridis::scale_color_viridis(10,discrete = T)+ggtitle('MixDist-0.2')
```

:::


### Abiotics

::: {.panel-tabset}

#### Original distance

```{r}
df_outputSS %>% 
  mutate(NumberOfClusters = as.integer(gsub('Cluster','',clusters)),
         Dimension = ifelse(dimension=='df_LatDephtDistance','GeoSpatial','Abiotics'),
         agglevel=factor(agglevel,levels=vec_aggregation)) %>%
  filter(Dimension=='Abiotics') %>% 
  ggplot(aes(x=NumberOfClusters,y=log(TotalSum),color=method,linetype=atleast))+
  geom_line(linewidth=0.75,alpha=0.75)+
  facet_wrap(~agglevel,nrow=2)+
  theme_minimal()+
  theme(legend.position = 'bottom')+ggtitle('Depth')

df_outputSS %>% 
  mutate(NumberOfClusters = as.integer(gsub('Cluster','',clusters)),
         Dimension = ifelse(dimension=='df_LatDephtDistance','GeoSpatial','Abiotics'),
         agglevel=factor(agglevel,levels=vec_aggregation)) %>%
  filter(Dimension=='Abiotics') %>% 
  ggplot(aes(x=NumberOfClusters,y=log(TotalSum),color=agglevel))+
  geom_line(linewidth=1,alpha=0.75)+
  facet_grid(atleast~method)+
  theme_minimal()+
  theme(legend.position = 'bottom')+
  viridis::scale_color_viridis(10,discrete = T)+ggtitle('Depth')
```

#### Rank
```{r}
df_outputSS_Rank %>% 
  mutate(NumberOfClusters = as.integer(gsub('Cluster','',clusters)),
         Dimension = ifelse(dimension=='df_LatDephtDistance','GeoSpatial','Abiotics'),
         agglevel=factor(agglevel,levels=vec_aggregation)) %>%
  filter(Dimension=='Abiotics') %>% 
  ggplot(aes(x=NumberOfClusters,y=log(TotalSum),color=method,linetype=atleast))+
  geom_line(linewidth=0.75,alpha=0.75)+
  facet_wrap(~agglevel,nrow=2)+
  theme_minimal()+
  theme(legend.position = 'bottom')+ggtitle('Rank-Depth')

df_outputSS_Rank %>% 
  mutate(NumberOfClusters = as.integer(gsub('Cluster','',clusters)),
         Dimension = ifelse(dimension=='df_LatDephtDistance','GeoSpatial','Abiotics'),
         agglevel=factor(agglevel,levels=vec_aggregation)) %>%
  filter(Dimension=='Abiotics') %>% 
  ggplot(aes(x=NumberOfClusters,y=log(TotalSum),color=agglevel))+
  geom_line(linewidth=1,alpha=0.75)+
  facet_grid(atleast~method)+
  theme_minimal()+
  theme(legend.position = 'bottom')+
  viridis::scale_color_viridis(10,discrete = T)+ggtitle('Rank-Depth')
```

#### Mixture of DistMatrices
```{r}
df_outputSS_MixDist %>% 
  mutate(NumberOfClusters = as.integer(gsub('Cluster','',clusters)),
         Dimension = ifelse(dimension=='df_LatDephtDistance','GeoSpatial','Abiotics'),
         agglevel=factor(agglevel,levels=vec_aggregation)) %>%
  filter(Dimension=='Abiotics') %>% 
  ggplot(aes(x=NumberOfClusters,y=log(TotalSum),color=method,linetype=atleast))+
  geom_line(linewidth=0.75,alpha=0.75)+
  facet_wrap(~agglevel,nrow=2)+
  theme_minimal()+
  theme(legend.position = 'bottom')+ggtitle('MixDist-0.2')

df_outputSS_MixDist %>% 
  mutate(NumberOfClusters = as.integer(gsub('Cluster','',clusters)),
         Dimension = ifelse(dimension=='df_LatDephtDistance','GeoSpatial','Abiotics'),
         agglevel=factor(agglevel,levels=vec_aggregation)) %>%
  filter(Dimension=='Abiotics') %>% 
  ggplot(aes(x=NumberOfClusters,y=log(TotalSum),color=agglevel))+
  geom_line(linewidth=1,alpha=0.75)+
  facet_grid(atleast~method)+
  theme_minimal()+
  theme(legend.position = 'bottom')+
  viridis::scale_color_viridis(10,discrete = T)+ggtitle('MixDist-0.2')
```

::: 

::: 


::: 

:::



:::